(function(){var __webpack_modules__={9717:function(){eval("/**\n * this will run in a background thread as a web worker.\n * it will receive signals from the main thread which will make it do searching tasks.\n * @see @/components/Select.vue\n */\nconst IS_WEB_WORKER = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;\nif (!IS_WEB_WORKER) {\n  throw new Error(\"Not running in a web worker!\");\n}\nlet index = 0;\nlet search_list = [];\n\n// called when worker receives a message from main thread via postMessage()\nonmessage = function ({\n  data: {\n    signal,\n    data,\n    meta\n  }\n}) {\n  meta = meta || {};\n  if (signal === \"set_search_list\") {\n    index = 0;\n    search_list = [];\n    for (const value of data) {\n      // add index to use later when sending result.\n      search_list.push({\n        index,\n        value\n      });\n      index += 1;\n    }\n    postMessage({\n      meta,\n      signal: 'log',\n      data: index + 1 + ' is the new search list size'\n    }, {});\n  } else if (signal === \"search\") {\n    const query = data;\n    const matches = [...search_list].sort((b, a) => similarText(a.value, query) - similarText(b.value, query));\n    let result = matches.map(m => m.index);\n    if (meta.limit > 0) {\n      result = result.slice(0, meta.limit);\n    }\n    postMessage({\n      meta,\n      signal: 'search_result',\n      data: result\n    }, {});\n  } else {\n    // send back error\n    postMessage({\n      meta,\n      signal: 'log',\n      data: 'unknown signal type received: ' + signal\n    }, {});\n  }\n};\nfunction similarText(first, second, percent) {\n  //  discuss at: https://locutus.io/php/similar_text/\n  // original by: Rafa≈Ç Kukawski (https://blog.kukawski.pl)\n  // bugfixed by: Chris McMacken\n  // bugfixed by: Jarkko Rantavuori original by findings in stackoverflow (https://stackoverflow.com/questions/14136349/how-does-similar-text-work)\n  // improved by: Markus Padourek (taken from https://www.kevinhq.com/2012/06/php-similartext-function-in-javascript_16.html)\n  //   example 1: similar_text('Hello World!', 'Hello locutus!')\n  //   returns 1: 8\n  //   example 2: similar_text('Hello World!', null)\n  //   returns 2: 0\n  if (first === null || second === null || typeof first === 'undefined' || typeof second === 'undefined') {\n    return 0;\n  }\n  first += '';\n  second += '';\n  let pos1 = 0;\n  let pos2 = 0;\n  let max = 0;\n  const firstLength = first.length;\n  const secondLength = second.length;\n  let p;\n  let q;\n  let l;\n  let sum;\n  for (p = 0; p < firstLength; p++) {\n    for (q = 0; q < secondLength; q++) {\n      for (l = 0; p + l < firstLength && q + l < secondLength && first.charAt(p + l) === second.charAt(q + l); l++) {// eslint-disable-line max-len\n        // @todo: ^-- break up this crazy for loop and put the logic in its body\n      }\n      if (l > max) {\n        max = l;\n        pos1 = p;\n        pos2 = q;\n      }\n    }\n  }\n  sum = max;\n  if (sum) {\n    if (pos1 && pos2) {\n      sum += similarText(first.substr(0, pos1), second.substr(0, pos2));\n    }\n    if (pos1 + max < firstLength && pos2 + max < secondLength) {\n      sum += similarText(first.substr(pos1 + max, firstLength - pos1 - max), second.substr(pos2 + max, secondLength - pos2 - max));\n    }\n  }\n  if (!percent) {\n    return sum;\n  }\n  return sum * 200 / (firstLength + secondLength);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9717\n")}},__webpack_exports__={};__webpack_modules__[9717]()})();